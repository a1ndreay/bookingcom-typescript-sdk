# yaml-language-server: $schema=https://app.stainless.com/config.schema.json

organization:
  # Name of your organization or company, used to determine the name of the client
  # and headings.
  name: booking.com
  docs: https://docs.booking.com.com
  contact: dev-feedback@booking.com.com

# `targets` define the output targets and their customization options, such as
# whether to emit the Node SDK and what it's package name should be.
targets:
  typescript:
    package_name: booking.com
    production_repo: a1ndreay/booking.com
    publish:
      npm: true

# `environments` are a map of the name of the environment (e.g. "sandbox",
# "production") to the corresponding url to use.
environments:
  production: http://localhost:5006/v1

# `resources` define the structure and organization for your API, such as how
# methods and models are grouped together and accessed. See the [configuration
# guide] for more information.
#
# [configuration guide]: https://app.stainless.com/docs/guides/configure#resources
resources:
  hotels:
    # Configure the methods defined in this resource. Each key in the object is the
    # name of the method and the value is either an endpoint (for example, `get /foo`)
    # or an object with more detail.
    #
    # [reference]: https://app.stainless.com/docs/reference/config#method
    methods:
      list: get /hotels
      retrieve: get /hotels/{hotelId}
    # Subresources define resources that are nested within another for more powerful
    # logical groupings, e.g. `cards.payments`.
    subresources:
      favourite:
        methods:
          add: post /hotels/{hotelId}/favourite
          remove: delete /hotels/{hotelId}/favourite

settings:
  # All generated integration tests that hit the prism mock http server are marked
  # as skipped. Removing this setting or setting it to false enables tests, but
  # doing so may result in test failures due to bugs in the test server.
  #
  # [prism mock http server]: https://stoplight.io/open-source/prism
  disable_mock_tests: true
  license: Apache-2.0

# `client_settings` define settings for the API client, such as extra constructor
# arguments (used for authentication), retry behavior, idempotency, etc.
client_settings:
  opts:
    api_key:
      type: string
      read_env: BOOKING_COM_API_KEY
      nullable: true
      auth:
        security_scheme: bearerAuth

security_schemes:
  bearerAuth:
    type: http
    scheme: bearer

security:
  - bearerAuth: []

# `readme` is used to configure the code snippets that will be rendered in the
# README.md of various SDKs. In particular, you can change the `headline`
# snippet's endpoint and the arguments to call it with.
readme:
  example_requests:
    default:
      type: request
      endpoint: get /hotels
      params: {}
    headline:
      type: request
      endpoint: get /hotels
      params: {}
